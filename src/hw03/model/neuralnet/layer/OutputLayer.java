/* *****************************************
 * CSCI205 - Software Engineering and Design
 * Fall 2018
 *
 * Name: Logan Stiles and Kartikeya Sharma
 * Date: Oct 10, 2018
 * Time: 5:00:00 PM
 *
 * Project: 205-FA18Class
 * Package: hw02
 * File: OutputLayer
 * Description: This file contains OutputLayer, which represents the last
 *              column of neurons within a neural network.
 *
 * ****************************************
 */
package hw03.model.neuralnet.layer;

import hw03.model.neuralnet.NeuralNet;
import hw03.model.neuralnet.ProgramMode;
import hw03.model.neuralnet.activationfunction.SigmoidActivationFunction;
import hw03.model.neuralnet.neuron.Neuron;
import hw03.model.neuralnet.neuron.OutputNeuron;
import java.util.ArrayList;

/**
 * OutputLayer represents the last column of neurons within a neural network.
 *
 * @author cld028, lts010, ks061
 */
public class OutputLayer extends Layer {

    /**
     * Represents the expected outputs that the neural network should have
     * generated within the neurons in the output layer (if training the neural
     * network)
     */
    private double[] targetOutputs;
    /**
     * Represents the errors, i.e. the difference between the target output and
     * actual output generated by the neural network (if training the neural
     * network)
     */
    private double[] outputErrors;

    /**
     * Contains the outputs of Network for the last forward propagation of input
     * data.
     */
    private double[] outputs;

    /**
     * Link to previous layer in the neural network
     */
    private Layer prevLayer;

    /**
     * Constructor that initializes an output layer with a particular number of
     * neurons, a string identifier for the layer, the index of the layer, and
     * the neural network the layer is within
     *
     * @param numNeurons number of neurons in the hidden layer
     * @param id string identifier for layer
     * @param layerNum nth layer
     * @param nN neural network hidden layer is within
     *
     * @author cld028
     */
    public OutputLayer(int numNeurons, String id, int layerNum, NeuralNet nN) {
        super(numNeurons, id, layerNum, nN);
    }

    /**
     * Creates and returns a list of output neurons
     *
     * @param numNeurons total number of neurons to be created within layer
     * @return list of all newly created neurons
     *
     * @author lts010, ks061
     */
    @Override
    public ArrayList<Neuron> createNeurons(int numNeurons) {
        ArrayList<Neuron> createdNeurons = new ArrayList<>();

        Neuron neuronToAdd;
        for (int i = 0; i < numNeurons; i++) {
            neuronToAdd = new OutputNeuron(i, this.layerNum,
                                           this.neuralNet,
                                           new SigmoidActivationFunction());
            createdNeurons.add(
                    neuronToAdd);
        }

        return createdNeurons;
    }

    /**
     * Computes the net input for each neuron in the layer
     *
     * @author lts010, ks061
     */
    @Override
    public void fireNeurons() {
        int neuronIndex = 0;
        for (Neuron neuron : this.neurons) {
            ((OutputNeuron) neuron).fire();
            if (super.getNeuralNet().getConfiguration().getProgramMode() == ProgramMode.TRAINING) {
                neuronIndex = neuron.getNeuronNum();
                this.outputErrors[neuronIndex] = this.targetOutputs[neuronIndex] - neuron.getNetValue();
            }
        }
        if (super.getNeuralNet().getConfiguration().getProgramMode() == ProgramMode.TRAINING) {
            learn();
        }
        else if (targetOutputs.length > 0) {

            for (Neuron neuron : this.neurons) {
                int neuronID = neuron.getNeuronNum();
                this.outputErrors[neuronID] = targetOutputs[neuronID] - this.neurons.get(
                        neuronID).getNetValue();
            }
        }
    }

    /**
     * Calculates the sum of the square of the errors of each output value in
     * the neural network
     *
     * @return sum of the square of the errors of each output value in the
     * neural network
     *
     * @author ks061, lts010
     */
    public double calculateSumOfSquaredErrors() {
        double sumOfSquaredErrors = 0;
        for (double error : this.outputErrors) {
            sumOfSquaredErrors += error * error;
        }
        return sumOfSquaredErrors;
    }

    /**
     * Throws an UnsupportedOperationException because the output layer should
     * not be connecting to another layer
     *
     * @param nextLayer layer that this layer will forward-propagate to
     *
     * @author cld028
     */
    @Override
    public void connectLayer(Layer nextLayer) {
        throw new UnsupportedOperationException(
                "Output layer shouldn't be connecting!");
    }

    /**
     * Adjusts weights for neurons connecting to layer; each neuron is called to
     * learn, i.e. calculate and back propagate its error data. Then, if the
     * previous layer pointer of this layer refers to a layer that is a hidden
     * layer (rather than an input layer), it will call the next layer to learn.
     *
     * @author ks061, lts010
     */
    @Override
    public void learn() {

        for (Neuron neuron : this.neurons) {
            int neuronID = neuron.getNeuronNum();
            this.outputs[neuronID] = this.neurons.get(neuronID).getNetValue();
            this.outputErrors[neuronID] = targetOutputs[neuronID] - this.outputs[neuronID];
            ((OutputNeuron) neuron).learn(this.outputErrors[neuronID]);
        }

        if (prevLayer instanceof HiddenLayer) {
            ((HiddenLayer) prevLayer).learn();
        }
    }

    /**
     * Sets the expected outputs for each neuron in the output layer of the
     * neural network
     *
     * @param targetOutputs the expected outputs for each neuron in the output
     * layer of the neural network
     *
     * @author ks061, lts010
     */
    public void setTargetOutputs(double[] targetOutputs) {
        this.targetOutputs = targetOutputs;
        this.outputErrors = new double[this.targetOutputs.length];
        this.outputs = new double[this.targetOutputs.length];
    }

    /**
     * Sets a pointer to the previous layer in the neural network
     *
     * @param prevLayer previous layer in the neural network
     *
     * @author ks061, lts010
     */
    public void setPrevLayer(Layer prevLayer) {
        this.prevLayer = prevLayer;
    }

    /**
     * Gets the predicted output for the current input
     *
     * @return predicted output for the current input
     *
     * @author lts010, ks061
     */
    public double[] getOutputs() {
        return (this.outputs);
    }
}
